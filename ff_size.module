<?php
/**
 * Implements hook_permission().
 */
function ff_size_permission() {
  return array(
	'access fileField size view alter' => array(
      'title' => t('Access view url to file alter'),
      'description' => t('Override view filefield formatter (URL TO FILE) with filesize and icons'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ff_size_menu() {
  $items = array();
  $items['admin/config/urltofile'] = array(
    'title'=> 'Collect File Field Key',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ff_size_admin_settings_form'),
    'access arguments' => array('access fileField size view alter'),
    'file' => 'includes/ff_size.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/*
* Implements of hook_views_pre_render
*/
function ff_size_views_pre_render(&$view) {
	drupal_add_css(drupal_get_path('module', 'ff_size'). '/css/filefieldsize.css');
	$field_key = variable_get('collect_file_field_key');
	$field_key_explode = explode(',', $field_key);
	$array_map = array_map("file_key_filter",$field_key_explode);

	foreach( $view->result as $result ) {		
		$filed_array_size = sizeof($array_map);
		for ($i=0; $i < $filed_array_size; $i++) { 
			foreach ($array_map[$i] as $key => $value) {
				view_result_object($result,'field_'.$key,$value);
			}
		}
	}
}


function get_file_icon($file_path,$convert_size,$label =NUll,$filemime) {
	
	preg_match('/[a-zA-Z]+$/', $file_path, $match);
	$link = create_document_link_with_icon($convert_size,$file_path,$match[0],$label);
	return $link;
}

function create_document_link_with_icon($convert_size,$filepath,$alt = NUll,$label = NULL) {

	global $base_path;
	$path = base_path().drupal_get_path('module', 'ff_size');
	if (empty($label)) {
		$label = t('Download');
	}
	$class_name = "$alt default";
	$document_path = l("$label ( $convert_size )", $filepath, 
		array('attributes' => array('target' => '_blank','class'=>$class_name), 'html' => TRUE));
	return $document_path;
}

function file_key_filter($keyWithName) {
	$explode_key = explode(':', $keyWithName);
	$field_key = isset($explode_key[0]) ? $explode_key[0] : '';
	$label = isset($explode_key[1]) ? $explode_key[1] : '';
	$key_Array = array(trim($field_key) => t(trim($label)));
	return $key_Array;
}

function view_result_object($result,$field_key,$label=NULL) {

	$result_clone = $result;
	if (property_exists( $result,$field_key))
	{
		$filter_key_array = $result->$field_key;
		for ($i=0; $i < sizeof($filter_key_array); $i++) {
	  	$document_path = $result->$field_key ? ((array_key_exists('#markup',$filter_key_array[$i]['rendered'])) ? 
	  		$filter_key_array[$i]['rendered']['#markup'] :'') :'';
			$file_size = $result->$field_key ? $filter_key_array[$i]['raw']['filesize'] :'';
			$filemime = $result->$field_key ? $filter_key_array[$i]['raw']['filemime'] :'';
			if (!empty($result->$field_key)) {
				$convert_size =format_size($file_size);
				if ($document_path !='') {
					$clone_key_array = $result_clone->$field_key;
					$clone_key_array[$i]['rendered']['#markup']= get_file_icon($document_path,$convert_size,$label,$filemime);
					$result->$field_key = $clone_key_array;
				}
			}
		}
	}
}